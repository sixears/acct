{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE TypeApplications           #-}
{-# LANGUAGE UnicodeSyntax              #-}

module Acct.Account
  ( Account, tests )
where

-- base --------------------------------

import Data.Bool      ( not )
import Data.Char      ( isAlphaNum, isUpper )
import Data.Either    ( Either( Right ) )
import Data.Eq        ( Eq )
import Data.Function  ( ($) )
import Data.List      ( filter )
import Data.Maybe     ( Maybe( Nothing ) )
import GHC.Exts       ( IsString )
import System.Exit    ( ExitCode )
import System.IO      ( IO )
import Text.Show      ( Show )

-- base-unicode-symbols ----------------

import Data.Bool.Unicode        ( (‚àß) )
import Data.Eq.Unicode          ( (‚â°), (‚â¢) )
import Data.Function.Unicode    ( (‚àò) )
import Data.Ord.Unicode         ( (‚â§) )
import Numeric.Natural.Unicode  ( ‚Ñï )

-- data-textual ------------------------

import Data.Textual  ( Printable, Textual( textual ) )

-- genvalidity -------------------------

import Data.GenValidity  ( GenValid( genValid, shrinkValid ), isValid )

-- more-unicode ------------------------

import Data.MoreUnicode              ( ‚ÑÇ, ùïä, ùïã )
import Data.MoreUnicode.Applicative  ( (‚äµ) )
import Data.MoreUnicode.Functor      ( (‚ä≥) )
import Data.MoreUnicode.Monoid       ( —é )

-- parsec-plus-base --------------------

import Parsec.Error  ( ParseError )

-- parsec-plus -------------------------

import ParsecPlus  ( Parsecable( parser ), parsec )

-- parsers -----------------------------

import Text.Parser.Char         ( alphaNum, upper )
import Text.Parser.Combinators  ( some )

-- QuickCheck --------------------------

import Test.QuickCheck.Arbitrary  ( Arbitrary( arbitrary, shrink ) )
import Test.QuickCheck.Gen        ( Gen, choose, listOf1, oneof )

-- tasty -------------------------------

import Test.Tasty  ( TestTree, testGroup )

-- tasty-hunit -------------------------

import Test.Tasty.HUnit  ( (@=?), testCase )

-- tasty-plus --------------------------

import TastyPlus  ( propInvertibleText, runTestsP, runTestsReplay, runTestTree )

-- tasty-quickcheck --------------------

import Test.Tasty.QuickCheck  ( testProperty )

-- text --------------------------------

import qualified  Data.Text
import Data.Text  ( find, index, length, pack )

-- validity ----------------------------

import Data.Validity  ( Validity( validate ), declare )

--------------------------------------------------------------------------------

newtype Account = Account ùïã deriving (Eq,IsString,Printable,Show)

instance Validity Account where
  validate (Account a) = let allAlphaNum = declare "all alphanumeric" $
                               Nothing ‚â° find (not ‚àò isAlphaNum) a
                             nonEmpty = declare "length ‚â• 2" $ 2 ‚â§ length a
                             startsWithCap = declare "starts with a capital" $
                               isUpper (index a 0)
                          in —é [ nonEmpty, startsWithCap, allAlphaNum ]

instance Parsecable Account where
  parser = Account ‚àò pack ‚ä≥ ((:) ‚ä≥ upper ‚äµ some alphaNum)

instance Textual Account where
  textual = Account ‚àò pack ‚ä≥ ((:) ‚ä≥ upper ‚äµ some alphaNum)

instance GenValid Account where
  genValid = let anum ‚à∑ Gen ‚ÑÇ
                 anum = oneof [choose('A','Z'),choose('a','z'),choose('0','9')]
             in Account ‚àò pack ‚ä≥ ((:) ‚ä≥ choose ('A','Z') ‚äµ listOf1 anum)
  shrinkValid a@(Account t) = filter (\ x ‚Üí x ‚â¢ a ‚àß isValid x) $
                                     Account ‚ä≥ Data.Text.inits t

instance Arbitrary Account where
  arbitrary = genValid
  shrink {- (Account a) -} = -- every valid (non-empty) prefix
                       {-
                       Account ‚ä≥ tail (Data.Text.inits a) -- tail is safe on
                                                          -- inits, as
                                                          -- inits "" ‚â° [""]
                       -} shrinkValid

parseAccountTests ‚à∑ TestTree
parseAccountTests =
  let parse' ‚à∑ ùïã ‚Üí ùïã ‚Üí Either ParseError Account
      parse' = parsec
   in testGroup "Account.parse"
                [ testCase "Cars" $
                    Right (Account "Cars") @=? parse' "Cars" "Cars"
                , testProperty "invertibleText" (propInvertibleText @Account)
                ]

----------------------------------------


tests ‚à∑ TestTree
tests = testGroup "Acct.Transaction" [ parseAccountTests ]

--------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ ùïä ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ ùïä ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------
