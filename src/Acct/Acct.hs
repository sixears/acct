{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE UnicodeSyntax     #-}

module Acct.Acct
  ( main )
where

import Base1T  hiding  ( toList )

-- base --------------------------------

import qualified  Data.List           as  List
import qualified  Data.List.NonEmpty  as  NonEmpty

import Data.Foldable       ( sum )
import Data.List           ( filter, reverse, sortOn )
import Data.String         ( unwords )
import GHC.Exts            ( toList )
import Text.Read           ( read )

-- data-textual ------------------------

import Data.Textual  ( Textual( textual ) )

-- fpath -------------------------------

import FPath.AbsFile  ( AbsFile )
import FPath.File     ( File )

-- lens --------------------------------

import Control.Lens.At      ( at )
import Control.Lens.Getter  ( view )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock )

-- mockio-log --------------------------

import MockIO.Log  ( MockIOClass )

-- monadio-plus ------------------------

import MonadIO        ( say, warn )
import MonadIO.Base   ( getArgs )
import MonadIO.FPath  ( pResolve )

-- mtl ---------------------------------

import Control.Monad.Writer  ( MonadWriter, execWriterT, tell )

-- optparse-applicative ----------------

import Options.Applicative.Builder  ( auto, flag', help, long, metavar, option
                                    , short )
import Options.Applicative.Types    ( Parser )

-- optparse-plus -----------------------

import OptParsePlus  ( readT, textualArgument )

-- parsers -----------------------------

import Text.Parser.Char         ( digit )
import Text.Parser.Combinators  ( eof )

-- stdmain -----------------------------

import StdMain  ( LogTIO, stdMain )

-- text --------------------------------

import Data.Text  ( unlines )

-- text-printer ------------------------

import qualified Text.Printer  as  P

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Acct.Account      ( Account )
import Acct.AcctError    ( AcctError, exitCode, throwInconsistentTrxStmtsE
                         , throwNoNonStmtTrxFoundE, throwNoSuchStmtE )
import Acct.AcctState    ( AcctState, accounts, stmts )
import Acct.Amount       ( Amount, amount, aTotal, pretty )
import Acct.Annotation   ( Annotation )
import Acct.Date         ( date )
import Acct.EntrySource  ( EntrySource( SourceFile ) )
import Acct.ParseEntry   ( processInput )
import Acct.OStmtName    ( OStmtName )
import Acct.Stmt         ( Stmt( Stmt ), stmtY )
import Acct.StmtIndex    ( stmtIndex, stmtindex )
import Acct.StmtEntries  ( StmtEntries )
import Acct.StmtEntry    ( StmtEntry( SE_BRK, SE_SIMP ), accts, oAccts )
import Acct.StmtIndex    ( notStmtIndex )
import Acct.TEntry       ( TEntry )
import Acct.TrxBrkHead   ( TrxBrkHead )
import Acct.TrxBrk       ( hd, prettyBrk )
import Acct.TrxSimp      ( TrxSimp, parent )

--------------------------------------------------------------------------------

newtype MaybeN = MaybeN (ùïÑ ‚Ñï)  deriving  (Eq,Show)

instance Printable MaybeN where
  print (MaybeN ùïπ) = "¬´nothing¬ª"
  print (MaybeN (ùïµ i)) = P.text $ [fmt|%d|] i

instance Textual MaybeN where
  textual = MaybeN ‚ä≥ ((const ùïπ ‚ä≥ eof) ‚à§ (ùïµ ‚àò read ‚ä≥ some digit))

data DumpType = DUMP_ACCTS | DUMP_STMTS | DUMP_STMT ‚Ñï | OUTPUT_STMT MaybeN
              | TUPTUO_STMT MaybeN | REMOVE_STMT ‚Ñï
  deriving (Eq,Show)

data Options = Options { input    ‚à∑ File
                       , dumpType ‚à∑ DumpType
                       }

parseOpts ‚à∑ Parser Options
parseOpts =
  let dump_stmt_help   = "print statement transactions"
      output_stmt_help = unwords [ "write statement to stdout suitable for its"
                                 , "own file; use '' for the empty stmt"]
      tuptuo_stmt_help = unwords [ "write stdout all entries not in a given"
                                 , "stmt; suitable for re-reading from a file;"
                                 , "use '' for the empty stmt"
                                 ]
      remove_stmt_help = unwords [ "write statement to its own file;"
                                 , "re-write the main file excluding that stmt"]
  in  Options ‚ä≥ textualArgument (metavar "ACCOUNTS-FILE")
              ‚äµ (flag' DUMP_STMTS (—é [ short 'x', long "dump-stmts"
                                     , help "dump statement totals" ])
                ‚à§ DUMP_STMT ‚ä≥ option auto     (—é [ short 'X', long "to-stmt"
                                              , help dump_stmt_help ])
                ‚à§ OUTPUT_STMT ‚ä≥ option readT  (—é [ short 'S', long "print-stmt"
                                                 , help output_stmt_help
                                                 ])
                ‚à§ TUPTUO_STMT ‚ä≥ option readT  (—é [ long "tnirp-stmt"
                                                 , help tuptuo_stmt_help
                                                 ])
                ‚à§ REMOVE_STMT ‚ä≥ option auto   (—é [ short 'R', long "remove-stmt"
                                                 , help remove_stmt_help ])
                ‚à§ pure DUMP_ACCTS
                )

----------------------------------------

main ‚à∑ IO()
main = do
  let prog_desc ‚à∑ ùïã = "read an accounts file, emit totals"
  let do_main ‚à∑ DoMock ‚Üí Options ‚Üí LogTIO MockIOClass AcctError Word8
      do_main _ opts = do
        i ‚à∑ AbsFile ‚Üê pResolve (input opts)
        —• @AcctError (processInput $ SourceFile i) ‚â´ \ case
          ùï∑ e ‚Üí warn ([fmtT|error parsing file '%T': %T|] i e) ‚™º return 10
          ùïΩ (es,as) ‚Üí liftIO $ case dumpType opts of
                       DUMP_STMTS             ‚Üí dump_stmts as
                       DUMP_STMT x            ‚Üí dump_stmt as x
                       OUTPUT_STMT (MaybeN x) ‚Üí output_stmt as x
                       TUPTUO_STMT (MaybeN x) ‚Üí tuptuo_stmt es x
                       DUMP_ACCTS             ‚Üí dump_accts as
                       REMOVE_STMT _          ‚Üí return 255
  getArgs ‚â´ stdMain prog_desc parseOpts do_main

----------------------------------------

dump_accts ‚à∑ AcctState ‚Üí IO Word8
dump_accts as = do
  ms ‚Üê forM (toList $ as ‚ä£ accounts) $ \ (a,ts) ‚Üí do
                                         let m = aTotal ts
                                         say $ [fmtT|%20T  %12t|] a (pretty m)
                                         return m
  say $ [fmtT|Total:  %10t|] (pretty $ sum ms)
  return 0

----------------------------------------

stmtFold ‚à∑ [(Œ±, Amount, Amount)] ‚Üí (Œ±, StmtEntries) ‚Üí [(Œ±, Amount, Amount)]
stmtFold (x@(_,_,c):xs) (i,toList ‚Üí ts) =
  let new = (i,(aTotal ts),c + (aTotal ts))
  in  new : x : xs
stmtFold [] (i,toList ‚Üí ts) =
  [(i,(aTotal ts),(aTotal ts))]

----------------------------------------

dump_stmt ‚à∑ MonadIO Œº ‚áí AcctState ‚Üí ‚Ñï ‚Üí Œº Word8
dump_stmt as n =
  let n'  = stmtIndex (ùïµ $ Stmt n)
      st ‚à∑ ùïÑ StmtEntries
      st = as ‚ä£ stmts ‚àò at n'
      sts = foldl stmtFold [] (sortOn fst ‚àò toList $ as ‚ä£ stmts)
  in do
    let prior_stmt = last $ filter (\ (i,_,_) ‚Üí i < n')
                          $ reverse sts
    acc ‚Üê case prior_stmt of
      ùïµ (i,_,t) ‚Üí do say ([fmtT|Statement %03T  Accumulated %12t|] i (pretty t))
                     return t
      ùïπ         ‚Üí return 0
    case st of
      ùïπ    ‚Üí warn ([fmtT|no such statement found: %d|] n) ‚™º return 11
      ùïµ ts ‚Üí liftIO $ do
        let -- if p (which should be the parent of t) has already been printed;
            -- then do nothing; else if p's stmt is t's stmt; then print it
            -- (adding it and its amount to the accumulator); else print t
            -- (again, adding it to the accumulator)
            maybe_print_entry ‚à∑ MonadIO Œº ‚áí
                                (Amount,[TrxBrkHead]) ‚Üí TrxSimp ‚Üí TrxBrkHead
                              ‚Üí Œº (Amount,[TrxBrkHead])
            maybe_print_entry (tacc,xs) t p =
                                if p ‚àà xs
                                then return (tacc,xs)
                                else if p ‚ä£ stmtY ‚â° ùïµ (Stmt n)
                                     then do say $ pretty p
                                             return (tacc + p‚ä£amount, p:xs)
                                     else do say $ pretty t
                                             return (tacc + t‚ä£amount, xs)

            -- Print each statement entry, and add its amount to a running
            -- summary total - unless it is a sub-trx of a breakdown whose
            -- header has already been printed.
            print_entry ‚à∑ MonadIO Œº ‚áí (Amount,[TrxBrkHead]) ‚Üí StmtEntry
                                    ‚Üí Œº (Amount,[TrxBrkHead])
            print_entry (tacc,xs) x =
              case x of
                SE_BRK b ‚Üí do
                  say $ pretty b
                  return (tacc + b‚ä£amount, b ‚ä£ hd : xs)
                SE_SIMP t ‚Üí
                  case t ‚ä£ parent of
                    ùïπ   ‚Üí do
                      say $ pretty t
                      return (tacc + t‚ä£amount, xs)
                    ùïµ p ‚Üí maybe_print_entry (tacc,xs) t p

        (ts_acc,_) ‚Üê foldM print_entry (0,[]) (sortOn (view date) (toList ts))
        say ([fmtT|Statement %03T  Accumulated %12t|] n' (pretty (acc+ts_acc)))
        return 0

----------------------------------------

{-| Print each statement entry - unless it is a sub-trx of a breakdown whose
    header has already been printed.  The accumulator of TrxBrkHeads that have
    already been printed is passed in as the first argument, and returned.
 -}
textEntry ‚à∑ (MonadError AcctError Œ∑, MonadWriter ùïã Œ∑) ‚áí
            [TrxBrkHead] ‚Üí StmtEntry ‚Üí Œ∑ [TrxBrkHead]
textEntry xs (SE_BRK  b) = do
  tell $ "\n" ‚äï prettyBrk b ‚äï "\n"
  return (b ‚ä£ hd : xs)
textEntry xs (SE_SIMP t) =
  case t ‚ä£ parent of
    ùïπ   ‚Üí tell (pretty t ‚äï "\n") ‚™º return xs
    ùïµ p ‚Üí throwInconsistentTrxStmtsE t p

----------------------------------------

entriesAccounts ‚à∑ StmtEntries ‚Üí NonEmpty Account
entriesAccounts ts =
  NonEmpty.sort ‚àò NonEmpty.nub $ foldl1 (‚óá) (accts ‚ä≥ toList ts)

----------------------------------------

entriesOAccounts ‚à∑ StmtEntries ‚Üí [OStmtName]
entriesOAccounts ts = List.sort ‚àò List.nub $ foldl1 (‚óá) (oAccts ‚ä≥ toList ts)

----------------------------------------

entriesAccountsText ‚à∑ MonadWriter ùïã Œ∑ ‚áí StmtEntries ‚Üí Œ∑ ()
entriesAccountsText ts =
  forM_ (entriesAccounts ts) (tell ‚àò [fmt|ReStart: %T\n|])

----------------------------------------

entriesOAccountsText ‚à∑ MonadWriter ùïã Œ∑ ‚áí StmtEntries ‚Üí Œ∑ ()
entriesOAccountsText ts =
  forM_ (entriesOAccounts ts) (tell ‚àò [fmt|ReoStart: %T\n|])

----------------------------------------

{-| Format text for a statement, suitable for writing to its own file. -}
outputStmt ‚à∑ MonadError AcctError Œ∑ ‚áí AcctState ‚Üí ùïÑ ‚Ñï ‚Üí Œ∑ ùïã
outputStmt as n =
  let st ‚à∑ ùïÑ StmtEntries
      st = as ‚ä£ stmts ‚àò at (stmtIndex (Stmt ‚ä≥ n))
  in do
    case st of
      ùïπ    ‚Üí case n of
                ùïπ   ‚Üí throwNoNonStmtTrxFoundE
                ùïµ m ‚Üí throwNoSuchStmtE m
      ùïµ ts ‚Üí do
        let pfx = maybe "" [fmt|## Statement: %d\n\n|] n
        t ‚Üê execWriterT $ do
              entriesAccountsText ts
              entriesOAccountsText ts
              tell "\n"
              foldM textEntry [] (sortOn (view date) (toList ts))
        return $ pfx ‚äï t

----------------------------------------

{-| Format text for all statements except a given one (or except the
    non-statement trx), suitable for writing a file. -}
tuptuoStmt ‚à∑ MonadError AcctError Œ∑ ‚áí
             [Annotation TEntry EntrySource] ‚Üí ùïÑ ‚Ñï ‚Üí Œ∑ ùïã
tuptuoStmt es n = do
  case filter (Ô¨ß ‚àò notStmtIndex (stmtIndex (Stmt ‚ä≥ n))) $ es of
    [] ‚Üí throwNoNonStmtTrxFoundE
    ts ‚Üí return ‚àò unlines $ toText ‚ä≥ ts

----------------------------------------

output_stmt ‚à∑ MonadIO Œº ‚áí AcctState ‚Üí ùïÑ ‚Ñï ‚Üí Œº Word8
output_stmt as n = case outputStmt as n of
                     ùï∑ e ‚Üí warn (toText e) ‚™º return (exitCode e)
                     ùïΩ t ‚Üí say t ‚™º return 0

----------------------------------------

tuptuo_stmt ‚à∑ MonadIO Œº ‚áí [Annotation TEntry EntrySource] ‚Üí ùïÑ ‚Ñï ‚Üí Œº Word8
tuptuo_stmt es n = case tuptuoStmt es n of
                     ùï∑ e ‚Üí warn (toText e) ‚™º return (exitCode e)
                     ùïΩ t ‚Üí say t ‚™º return 0

----------------------------------------

dump_stmts ‚à∑ AcctState ‚Üí IO Word8
dump_stmts as = do
  let sts = foldl stmtFold [] (sortOn fst ‚àò toList $ as ‚ä£ stmts)
  forM_ (reverse sts) $ \ (i,a,t) ‚Üí
    if i ‚â° [stmtindex||]
    then say $ [fmtT|Total: %t|] (pretty t)
    else say ([fmtT|  Statement %03T  This Stmt %12t  Accumulated %12t|]
              i (pretty a) (pretty t))
  return 0

-- that's all, folks! ----------------------------------------------------------
