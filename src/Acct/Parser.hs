{-# LANGUAGE UnicodeSyntax #-}

module Acct.Parser
  ( noNLCR, wspaces )
where

-- base --------------------------------

import Control.Applicative  ( many )
import Data.Char            ( isSpace )

-- base-unicode-symbols ----------------

import Data.Bool.Unicode  ( (‚àß) )
import Data.List.Unicode  ( (‚àâ) )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool    ( ùîπ )
import Data.MoreUnicode.Char    ( ‚ÑÇ )
import Data.MoreUnicode.String  ( ùïä )

-- parsec ------------------------------

import Text.Parsec.Char  ( noneOf, satisfy )
import Text.Parsec.Prim  ( ParsecT, Stream, skipMany )

--------------------------------------------------------------------------------

nl ‚à∑ ‚ÑÇ
nl = '\n'

cr ‚à∑ ‚ÑÇ
cr = '\r'

nlcr ‚à∑ [‚ÑÇ]
nlcr = [ nl, cr ]

notNLCR ‚à∑ Stream s m ‚ÑÇ ‚áí ParsecT s u m ‚ÑÇ
notNLCR = noneOf nlcr

noNLCR ‚à∑ Stream s m ‚ÑÇ ‚áí ParsecT s u m ùïä
noNLCR = many notNLCR

{- | Like `isSpace`, but excludes nl/cr chars. -}
isWSpace ‚à∑ ‚ÑÇ ‚Üí ùîπ
isWSpace c = isSpace c ‚àß c ‚àâ nlcr

wspace ‚à∑ Stream s m ‚ÑÇ ‚áí ParsecT s u m ‚ÑÇ
wspace = satisfy isWSpace

wspaces ‚à∑ Stream s m ‚ÑÇ ‚áí ParsecT s u m ()
wspaces = skipMany wspace

-- that's all, folks! ----------------------------------------------------------
